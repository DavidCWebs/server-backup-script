#!/bin/bash
#
# Website Backup Script for SERVER
#
# Add this script as a cronjob to run daily. It creates an archive of incremental
# backups, with the current date set as the name of the backup directory.
# Assumes the script is run from /usr/local/sbin.
#
# Date for $DAY0 and $DAY1 is in ISO-8601 format: 

# ------------------------------------------------------------------------------
# Set directory
THIS=$(readlink -f "${BASH_SOURCE[0]}")
PROJECT_DIR=$(dirname "${THIS}")
CONFIG_FILE="${PROJECT_DIR}/server-backup.conf"
SERVERNAME=$(hostname -s)
HOST=localhost
DAY0=$(date -I)
DAY1=$(date -I -d "1 day ago")
TIMESTAMP=$(date '+%Y-%m-%d at %H:%M:%S')
PARENT_DIR="/home/${SERVERNAME}backup"

# Sanity checks. The main parent directory should exist. If it doesn't, exit early.
[[ -d "${PARENT_DIR}" ]] || { echo "${PARENT_DIR} doesn't exist or is not a directory. Exiting."; exit 1; }

BACKUP_PATH="${PARENT_DIR}/backup"
SRC="${PARENT_DIR}/source"
DB_DUMPS="${SRC}/sql"
TRG="${BACKUP_PATH}/$DAY0"
LNK="${BACKUP_PATH}/$DAY1"

# Include project specific dependencies: required for MySQL credentials
[[ ! -f "${CONFIG_FILE}" ]] && { echo "Config file missing at ${CONFIG_FILE}"; exit 2; }
# shellcheck disable=SC1090
. "${CONFIG_FILE}"

# Get list of databases, but not 'Database' or 'information_schema'
#get_db_opts=("--user=${MYSQL_USER}" "--password=${MYSQL_PASSWD}" -e "SHOW DATABASES;") 
get_db_opts=("--login-path=backup" -e "SHOW DATABASES;") 
DATABASES=$(mysql "${get_db_opts[@]}" | grep -Ev "(Database|information_schema|performance_schema)")

# Remove previously dumped databases from the source directory.
if [[ -n "${DB_DUMPS}" ]] && [[ -d "${DB_DUMPS}" ]]; then
	shopt -s nullglob
	rm -f "${DB_DUMPS}"/*.sql
	rm -f "${DB_DUMPS}"/*.log
	shopt -u nullglob
else 
	echo "The variable \$DB_DUMPS is not set."
	exit 3
fi

function run_backup {
	echo "Database backup report. ${TIMESTAMP}" > "${DB_DUMPS}"/db-backup.log
	echo "==============================================" >> "${DB_DUMPS}"/db-backup.log

	# Default for the mysqldump report.
	dumpfail=false
	
	# We do not use --log-error since this option logs EVERYTHING, not just errors.
	# If required, consider adding "--log-error=${DB_DUMPS}/${db}".log and 
	SQL_OPTS=(
		"--login-path=backup"
		--no-tablespaces
		-v
		--single-transaction
		"--host=${HOST}"
	)
	# Create dumps for each database.
	for db in $DATABASES
	do
		mysqldump "${SQL_OPTS[@]}" "${db}" > "${DB_DUMPS}/${db}.sql"
		# shellcheck disable=SC2181
		if [[ $? -eq 0 ]]
		then
			echo -e "Mysqldump created ${db}.sql" >> "${DB_DUMPS}"/db-backup.log
		else
			echo "
			Mysqldump encountered a problem backing up ${db}. \
			" >> "${DB_DUMPS}"/error-mysqldump.log
			dumpfail=true
		fi
	done
	# The rsync options: follow the symlinks to make a hard backup.
	OPT=(-aqL --progress --exclude"="{'*.zip','debian.cnf'} --delete "--link-dest=${LNK}")

	# Execute the backup
	rsync "${OPT[@]}" "${SRC}"/ "${TRG}"
	# shellcheck disable=SC2181
	if [[ $? -gt 0 ]]
	then
		# In case of rsync FAILURE.
		local error_msg="ERROR. rsync on ${SERVERNAME} didn't complete the backup: at ${TIMESTAMP}"
		echo "${error_msg}" >> /var/log/server-backup.log
		email_to_admin "${error_msg}" "[${SERVERNAME}] Backup Error"
	else
		# In case of rsync SUCCESS.
		if [[ false == "${dumpfail}" ]]
		then
			# rsync & mysqldump SUCCESS.
			local success_msg="SUCCESS. ${SERVERNAME} backup made on: ${TIMESTAMP}"
			echo "${success_msg}" >> /var/log/server-backup.log
			email_to_admin "${success_msg}" "[${SERVERNAME}] Backup Success"
		else
			# Partial Success: rsync worked but there was at least one mysqldump error
			local partial_msg="PARTIAL SUCCESS, backup ${SERVERNAME} ${TIMESTAMP}. Rsync success, mysqldump errors"
			echo "${partial_msg}" >> /var/log/server-backup.log
			email_to_admin "${partial_msg}" "[${SERVERNAME}]: Partial Backup Success"
		fi
	fi

	# Remove old backups
	# shellcheck disable=SC2012
	ls -cprd "${BACKUP_PATH}"/* | head -n -"${RETAIN_NUMBER}" | xargs -d '\n' rm -rf

}

function email_to_admin {
	echo -e "$1" | mail -aFrom:"${SENDER}" -s "${2}" "${ADMIN_EMAIL}"
}

run_backup
